{
	"info": {
		"_postman_id": "0127ccab-adcb-4042-a7ed-a4b5321d8c6f",
		"name": "Warehouse API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "33479420"
	},
	"item": [
		{
			"name": "Requests for All Goods",
			"item": [
				{
					"name": "Get All Goods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test('Response status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"})",
									"",
									"pm.test('Message is not empty', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"})",
									"",
									"pm.test('Response time is less than 200ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/goods",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create new good",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.quantity).to.be.a('number');",
									"    pm.expect(responseData.quantity).to.be.at.least(0, \"Quantity should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Strawberry\",\r\n  \"article\": \"123\",\r\n  \"description\": \"Самая смачная красная клубничка которую вы видели\",\r\n  \"category\": \"Berry\",\r\n  \"price\": 50,\r\n  \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/goods"
					},
					"response": []
				},
				{
					"name": "Delete all goods",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_url}}/goods"
					},
					"response": []
				}
			]
		},
		{
			"name": "Requests by Id",
			"item": [
				{
					"name": "Get good by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/goodsById?id=26bfb744-df86-4322-813d-d5f609d48ef2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"goodsById"
							],
							"query": [
								{
									"key": "id",
									"value": "26bfb744-df86-4322-813d-d5f609d48ef2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update good by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 400', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"})",
									"",
									"pm.test('Message is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})",
									"",
									"pm.test('Content-Type header is set to \\'application/json\\'', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"совершенно другая Strawberry\",\r\n  \"article\": \"3487642fd\",\r\n  \"description\": \"Самаяe смачная и самая другая красная клубничка которую вы видели\",\r\n  \"category\": \"Berrfy\",\r\n  \"price\": 49.9,\r\n  \"quantity\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/goodsById?id=26bfb744-df86-4322-813d-d5f609d48ef2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"goodsById"
							],
							"query": [
								{
									"key": "id",
									"value": "26bfb744-df86-4322-813d-d5f609d48ef2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete good by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'message'\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The 'message' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/goodsById?id=26bfb744-df86-4322-813d-d5f609d48ef2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"goodsById"
							],
							"query": [
								{
									"key": "id",
									"value": "26bfb744-df86-4322-813d-d5f609d48ef2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Requests by Article",
			"item": [
				{
					"name": "Get Good by Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field - message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/goodsByArticle?article=123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"goodsByArticle"
							],
							"query": [
								{
									"key": "article",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Good by Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									"pm.test('Content-Type header is set to application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"})",
									"",
									"pm.test('Verify that the \\'message\\' field is present in the response', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist;",
									"})",
									"",
									"pm.test('Verify that the \\'message\\' field is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"совершенно другая Strawberry\",\r\n  \"article\": \"1234\",\r\n  \"description\": \"Самая смачная и самая другая красная клубreничка которую вы видели345\",\r\n  \"category\": \"Berry43\",\r\n  \"price\": 49.9,\r\n  \"quantity\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/goodsByArticle?article=123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"goodsByArticle"
							],
							"query": [
								{
									"key": "article",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Good by Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an(\"object\");",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The message field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Request is successful when article is not found and returns a 400 status code\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/goodsByArticle?article=123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"goodsByArticle"
							],
							"query": [
								{
									"key": "article",
									"value": "123"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "localhost:8080/warehouse"
		}
	]
}